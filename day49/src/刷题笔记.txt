                                            旋转二分数组的二分查找专题
题号：153. 寻找旋转排序数组中的最小值(数组中没有重复元素)
思路：
初始化left=0,right=num.length - 1
1、首先判断nums[left]是否小于等于nums[right]，如果是，说明此时数组在[left,right]之间是有序的，直接返回left对应的最小元素即可；
2、如果条件1不满足，接下来进行二分，判断nums[mid]是否大于等于nums[left]（为什么要等于呢，因为当数组是[2,1]时，left和mid初始对应的元素都是相
同的），如果满足nums[mid]大于等于nums[left]说明[left,mid]之间是有序的，最小元素一定在(mid,right]之间，此时更新left=mid+1
3、如果条件2不满足，即nums[mid]小于nums[left]，说明[left,mid]之间存在旋转点，因此最小值一定在这之间，此时更新right=mid
退出循环的条件是left=right或者nums[left]是小于等于nums[right]，此时返回left对应的元素即可
************************************************************************************************************************
题号：154. 寻找旋转排序数组中的最小值 II（数组中有重复元素）
思路：
初始化left=0,right=num.length - 1
1、首先判断nums[left]是否小于等于nums[right]，如果是，说明此时数组在[left,right]之间是有序的，直接返回left对应的最小元素即可；
2、如果条件1不满足，接下来进行二分，判断nums[mid]是否大于nums[left]，如果满足nums[mid]大于等于nums[left]说明[left,mid]之间是有序的，
最小元素一定在(mid,right]之间，此时更新left=mid+1（这里不能判断等于，比如[10，1，10，10，10，10]，此时left和mid对应的元素都是10，但是，
此时并不能说明[left,mid]之间是有序的，如果更新left=mid+1就会造成错误）
3、如果条件2不满足，即nums[mid]小于nums[left]，说明[left,mid]之间存在旋转点，因此最小值一定在这之间，此时更新right=mid
4、如果条件2和条件3都不满足，即nums[left]=nums[mid]（例如[10，1，10，10，10，10]），此时只需要将left自增一个即可（相当于手动去重）
退出循环的条件是left=right或者nums[left]是小于等于nums[right]，此时返回left对应的元素即可
************************************************************************************************************************
题号：33. 搜索旋转排序数组(数组中没有重复元素)
思路：
初始化left=0,right=num.length - 1
1、判断nums[mid]是否大于等于nums[left]（为什么要等于呢，因为当数组是[2,1]时，left和mid初始对应的元素都是相同的），
如果满足nums[mid]大于等于nums[left]说明[left,mid]之间是有序的，此时如果target大于等于nums[left]小于nums[mid]说明target肯定在这之间，
此时将right更新为mid-1即可；否在说明target存在于(mid,right]之间，更新left=mid+1即可
2、如果条件1不满足，即nums[mid]<nums[left]，说明[mid,right]之间是有序的；此时如果target大于nums[mid]小于等于nums[right]说明target肯定
在这之间，将left更新为mid+1；否在将right更新为mid-1
************************************************************************************************************************
题号：81. 搜索旋转排序数组 II（数组中有重复元素）
思路：
大体思路同上，不过多了一个去重的思路
************************************************************************************************************************