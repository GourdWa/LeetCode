题号 1143
思路
最长公共子序列，二维的dp问题
将字符串S1的每个字符填充到行；将字符串S2的每个字符填充到列
逐行遍历这个矩阵，可以得到递推公式
******************************************************************************************************************
题号 221
思路 1
最大的正方形
暴力，如果一个点为1，向右和向下增加一行和一列，判断增加的一行和一列是否全部为1，如果是，则继续增加
每次将最大的边保存下来
思路 2
动态规划
dp[i][j]代表以i，j为右下角的最大正方形的边长（注意不是i，j内包含的最大正方形的边）
递推方程
如果matrix[i][j]=0；那么dp[i][j]必然是0
如果matrix[i][j]=1；那么dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]))
******************************************************************************************************************
题号 69
思路 二分查找或暴力
暴力：
从1开始枚举i，知道i > x / i；
二分查找：
除了i=1或0之外，2i总是小于等于i²
因此上界是i/2，下界是1
二分查找，直到mid <= x/mid but mid +1 > x / (mid +1)
******************************************************************************************************************
题号 5
思路 最长回文子串
暴力
把s的每个子串都列出来，判断是否是回文串
动态规划  明儿见
用一个 boolean dp[l][r] 表示字符串从 i 到 j 这段是否为回文。
试想如果 dp[l][r]=true，我们要判断 dp[l-1][r+1] 是否为回文。只需要判断字符串在(l-1)和（r+1)两个位置是否为相同的字符

******************************************************************************************************************
